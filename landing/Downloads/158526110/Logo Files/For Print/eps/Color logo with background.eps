%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2230 2454
%%HiResBoundingBox: 0 0 2229.1199 2453.04
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2229.1199 2453.04 re
W
q
[0.24 0 0 -0.24 0 2453.04] cm
q
0 0 9287.5 10215.3125 re
W*
q
[3.123977 0 0 3.123691 0.000104003 0] cm
/DeviceRGB {} CS
[1 0.9961 0.9647] SC
/DeviceRGB {} cs
[1 0.9961 0.9647] sc
0 0 2972.9729 3270.2703 re
f
Q
q
[42.215908 0 0 42.212036 422.15918 1224.14905] cm
/DeviceRGB {} CS
[0.8588 0.5412 0.4235] SC
/DeviceRGB {} cs
[0.8588 0.5412 0.4235] sc
0 198 200 5 re
f
Q
q
[853.32538 0 0 853.24713 2512.8542 568.45227] cm
2.557 4.281 m
1.014 3.392 l
1.013 1.61 l
2.555 0.719 l
3.985 1.544 l
3.761 1.934 l
2.555 1.238 l
1.463 1.87 l
1.464 3.132 l
2.557 3.762 l
3.761 3.065 l
3.986 3.455 l
2.557 4.281 l
h
f
2.557 3.433 m
1.748 2.967 l
1.748 2.034 l
2.555 1.568 l
3.251 1.969 l
3.025 2.358 l
2.556 2.088 l
2.198 2.294 l
2.198 2.707 l
2.557 2.913 l
3.025 2.642 l
3.251 3.03 l
2.557 3.433 l
h
f
Q
q
[44.989338 0 0 44.985214 382.61804 4525.0957] cm
7.1289 40.37109 m
5.1562 40.37109 2.9297 39.824211 0.8789 38.710892 c
2.5586 35.429592 l
3.8672 36.308502 5.332 36.796791 6.7969 36.796791 c
9.6875 36.796791 11.3477 34.785091 11.3477 31.249891 c
11.3477 12.382891 l
15.254 12.382891 l
15.254 31.95289 l
15.254 37.226292 11.9923 40.370892 7.129 40.370892 c
7.1289 40.37109 l
h
40.913338 40.37109 m
33.081337 40.37109 27.104338 34.980492 27.104338 26.172089 c
27.104338 17.382988 33.080936 12.012089 40.913338 12.012089 c
48.706337 12.012089 54.702339 17.383188 54.702339 26.172089 c
54.702339 34.98069 48.706238 40.37109 40.913338 40.37109 c
h
40.913338 36.7187 m
46.440636 36.7187 50.815636 32.890602 50.815636 26.1717 c
50.815636 19.511499 46.440636 15.6837 40.913338 15.6837 c
35.36644 15.6837 30.971937 19.511799 30.971937 26.1717 c
30.971937 32.890499 35.366436 36.7187 40.913338 36.7187 c
h
75.615669 40.37109 m
69.853966 40.37109 65.63517 37.617191 64.69767 32.929691 c
68.662468 31.992191 l
69.287468 35.21489 72.080467 37.07029 75.752266 37.07029 c
78.701469 37.07029 81.533569 35.85939 81.474968 32.53899 c
81.435905 29.25769 77.881165 28.359291 74.111671 27.32419 c
69.834373 26.15229 65.556969 24.804689 65.556969 19.72649 c
65.556969 14.58979 69.795265 12.01169 74.814766 12.01169 c
79.678062 12.01169 84.05307 14.062491 85.087769 18.80859 c
81.318268 19.765619 l
80.634674 16.699219 78.076065 15.33202 74.990166 15.33202 c
72.216766 15.33202 69.462868 16.542919 69.462868 19.687519 c
69.462868 22.53912 72.548767 23.37892 76.044868 24.31642 c
80.439369 25.50782 85.47847 26.875019 85.47847 32.421921 c
85.47847 38.00782 80.79097 40.37112 75.615173 40.37112 c
75.615669 40.37109 l
h
115.14138 12.383 m
119.028084 12.383 l
119.028084 40 l
115.14138 40 l
115.14138 27.890999 l
101.567383 27.890999 l
101.567383 40 l
97.641586 40 l
97.641586 12.382999 l
101.567383 12.382999 l
101.567383 24.433998 l
115.14138 24.433998 l
115.14138 12.382999 l
115.14138 12.383 l
h
142.812439 40.37109 m
137.089737 40.37109 132.656433 36.992191 132.656433 30.76169 c
132.656433 12.38269 l
136.543137 12.38269 l
136.543137 30.214691 l
136.543137 34.765491 139.277542 36.855293 142.812637 36.855293 c
146.347733 36.855293 149.140732 34.745892 149.140732 30.214693 c
149.140732 12.382692 l
153.027435 12.382692 l
153.027435 30.761692 l
153.027435 36.992191 148.574341 40.371094 142.812439 40.371094 c
142.812439 40.37109 l
h
184.50653 40 m
182.20183 33.554699 l
169.85783 33.554699 l
167.553131 40 l
163.510132 40 l
173.68613 12.382999 l
178.37363 12.382999 l
188.54962 40 l
184.50662 40 l
184.50653 40 l
h
171.06932 30.1562 m
180.99123 30.1562 l
176.03032 16.230202 l
171.06932 30.1562 l
h
f
Q
q
[54.798187 0 0 54.793167 192.06155 6075.4766] cm
20.156 40 m
10.4685 27.402 l
8.0857 27.402 l
8.0857 40 l
4.199 40 l
4.199 12.382999 l
8.0857 12.382999 l
8.0857 23.925999 l
10.429501 23.925999 l
19.843601 12.382999 l
24.609201 12.382999 l
13.789202 25.546997 l
25.137201 39.999996 l
20.1567 39.999996 l
20.156 40 l
h
51.10865 15.879 m
40.05365 15.879 l
40.05365 24.472799 l
49.799751 24.472799 l
49.799751 27.9494 l
40.05365 27.9494 l
40.05365 36.4846 l
51.10865 36.4846 l
51.10865 40.000198 l
36.08865 40.000198 l
36.08865 12.383198 l
51.10865 12.383198 l
51.10865 15.879297 l
51.10865 15.879 l
h
67.353477 36.484402 m
76.787079 36.484402 l
76.787079 40 l
63.467079 40 l
63.467079 12.382999 l
67.353783 12.382999 l
67.353783 36.485001 l
67.353477 36.484402 l
h
91.723595 36.484402 m
101.157196 36.484402 l
101.157196 40 l
87.837196 40 l
87.837196 12.382999 l
91.7239 12.382999 l
91.7239 36.485001 l
91.723595 36.484402 l
h
127.226814 15.879 m
116.171814 15.879 l
116.171814 24.472799 l
125.917915 24.472799 l
125.917915 27.9494 l
116.171814 27.9494 l
116.171814 36.4846 l
127.226814 36.4846 l
127.226814 40.000198 l
112.206818 40.000198 l
112.206818 12.383198 l
127.226822 12.383198 l
127.226822 15.879297 l
127.226814 15.879 l
h
158.276749 12.383 m
149.194748 26.836 l
149.194748 40 l
145.268951 40 l
145.268951 26.855 l
136.167358 12.382 l
140.581451 12.382 l
147.222046 23.339001 l
153.882248 12.382001 l
158.276749 12.382001 l
158.276749 12.383 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
